// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: uamrpc.proto

package uamrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UamClient is the client API for Uam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UamClient interface {
	// GetAuthLocalByUsername 根据用户名查询本地认证记录
	GetAuthLocalByUsername(ctx context.Context, in *GetAuthLocalByUsernameReq, opts ...grpc.CallOption) (*GetAuthLocalByUsernameResp, error)
	// AddAuthLocal 添加本地认证记录
	AddAuthLocal(ctx context.Context, in *AddAuthLocalReq, opts ...grpc.CallOption) (*AddAuthLocalResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GetClientList(ctx context.Context, in *GetClientListReq, opts ...grpc.CallOption) (*GetClientListResp, error)
	// 通过AppCode列表查询客户端
	GetClientListByCodes(ctx context.Context, in *GetClientListByCodesReq, opts ...grpc.CallOption) (*GetClientListByCodesResp, error)
	// 通过AppCode查询客户端
	GetClientByCode(ctx context.Context, in *GetClientByCodeReq, opts ...grpc.CallOption) (*GetClientByCodeResp, error)
	AddClient(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*AddClientResp, error)
	UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error)
	DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...grpc.CallOption) (*DeleteClientResp, error)
	GetPermTypeOptions(ctx context.Context, in *GetPermTypeOptionsReq, opts ...grpc.CallOption) (*GetPermTypeOptionsResp, error)
	GetPermList(ctx context.Context, in *GetPermListReq, opts ...grpc.CallOption) (*GetPermListResp, error)
	GetPermPageList(ctx context.Context, in *GetPermPageListReq, opts ...grpc.CallOption) (*GetPermPageListResp, error)
	GetPermListByRoleId(ctx context.Context, in *GetPermListByRoleIdReq, opts ...grpc.CallOption) (*GetPermListByRoleIdResp, error)
	// 获取用户权限Id列表
	GetPermIdsByUid(ctx context.Context, in *GetPermIdsByUidReq, opts ...grpc.CallOption) (*GetPermIdsByUidResp, error)
	// 获取用户权限Key列表
	GetPermKeysByUid(ctx context.Context, in *GetPermKeysByUidReq, opts ...grpc.CallOption) (*GetPermKeysByUidResp, error)
	// 获取组关联的权限Id列表
	GetPermIdsByGroupId(ctx context.Context, in *GetPermIdsByGroupIdReq, opts ...grpc.CallOption) (*GetPermIdsByGroupIdResp, error)
	// 获取组关联的权限Key列表
	GetPermKeysByGroupId(ctx context.Context, in *GetPermKeysByGroupIdReq, opts ...grpc.CallOption) (*GetPermKeysByGroupIdResp, error)
	// 添加权限
	AddPerm(ctx context.Context, in *AddPermReq, opts ...grpc.CallOption) (*AddPermResp, error)
	// 更新权限
	UpdatePerm(ctx context.Context, in *UpdatePermReq, opts ...grpc.CallOption) (*UpdatePermResp, error)
	// 根据ID删除权限
	DeletePerm(ctx context.Context, in *DeletePermReq, opts ...grpc.CallOption) (*DeletePermResp, error)
	// 根据key删除权限
	DeletePermByKey(ctx context.Context, in *DeletePermByKeyReq, opts ...grpc.CallOption) (*DeletePermByKeyResp, error)
	// 批量添加权限
	BatchAddPerm(ctx context.Context, in *BatchAddPermReq, opts ...grpc.CallOption) (*BatchAddPermResp, error)
	// 获取所有角色列表，支持按是否可编辑筛选
	GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListResp, error)
	// 通过roleName查询role
	GetRoleByName(ctx context.Context, in *GetRoleByNameReq, opts ...grpc.CallOption) (*GetRoleByNameResp, error)
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
	// 更新或创建角色
	UpsertRole(ctx context.Context, in *UpsertRoleReq, opts ...grpc.CallOption) (*UpsertRoleResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
	GetRoleIdsByGroupId(ctx context.Context, in *GetRoleIdsByGroupIdReq, opts ...grpc.CallOption) (*GetRoleIdsByGroupIdResp, error)
	// 通过groupName查询group
	GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*GetGroupByNameResp, error)
	// 获取用户关联组列表
	GetGroupListByUid(ctx context.Context, in *GetGroupListByUidReq, opts ...grpc.CallOption) (*GetGroupListByUidResp, error)
	// 获取客户端下组列表
	GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error)
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error)
	// 更新或创建角色
	UpsertGroup(ctx context.Context, in *UpsertGroupReq, opts ...grpc.CallOption) (*UpsertGroupResp, error)
	// 更新组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	// 删除组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	// 查询组关联用户
	GetUserByGroupId(ctx context.Context, in *GetUserByGroupIdReq, opts ...grpc.CallOption) (*GetUserByGroupIdResp, error)
	// 获取用户分页列表
	GetUserPageList(ctx context.Context, in *GetUserPageListReq, opts ...grpc.CallOption) (*GetUserPageListResp, error)
	// 更新用户权限
	UpdateUserPerm(ctx context.Context, in *UpdateUserPermReq, opts ...grpc.CallOption) (*UpdateUserPermResp, error)
	// 用户入组
	AddUserGroup(ctx context.Context, in *AddUserGroupReq, opts ...grpc.CallOption) (*AddUserGroupResp, error)
	// 用户出组
	RemoveUserGroup(ctx context.Context, in *RemoveUserGroupReq, opts ...grpc.CallOption) (*RemoveUserGroupResp, error)
	// 用户添加角色
	AddUserRole(ctx context.Context, in *AddUserRoleReq, opts ...grpc.CallOption) (*AddUserRoleResp, error)
	// 用户移除角色
	RemoveUserRole(ctx context.Context, in *RemoveUserRoleReq, opts ...grpc.CallOption) (*RemoveUserRoleResp, error)
	// 同步系统客户端
	SyncSysClient(ctx context.Context, in *SyncSysClientReq, opts ...grpc.CallOption) (*SyncSysClientResp, error)
	// 获取系统客户端
	GetSysClient(ctx context.Context, in *GetSysClientReq, opts ...grpc.CallOption) (*GetSysClientResp, error)
}

type uamClient struct {
	cc grpc.ClientConnInterface
}

func NewUamClient(cc grpc.ClientConnInterface) UamClient {
	return &uamClient{cc}
}

func (c *uamClient) GetAuthLocalByUsername(ctx context.Context, in *GetAuthLocalByUsernameReq, opts ...grpc.CallOption) (*GetAuthLocalByUsernameResp, error) {
	out := new(GetAuthLocalByUsernameResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getAuthLocalByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddAuthLocal(ctx context.Context, in *AddAuthLocalReq, opts ...grpc.CallOption) (*AddAuthLocalResp, error) {
	out := new(AddAuthLocalResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addAuthLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetClientList(ctx context.Context, in *GetClientListReq, opts ...grpc.CallOption) (*GetClientListResp, error) {
	out := new(GetClientListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getClientList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetClientListByCodes(ctx context.Context, in *GetClientListByCodesReq, opts ...grpc.CallOption) (*GetClientListByCodesResp, error) {
	out := new(GetClientListByCodesResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getClientListByCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetClientByCode(ctx context.Context, in *GetClientByCodeReq, opts ...grpc.CallOption) (*GetClientByCodeResp, error) {
	out := new(GetClientByCodeResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getClientByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddClient(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*AddClientResp, error) {
	out := new(AddClientResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error) {
	out := new(UpdateClientResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/updateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...grpc.CallOption) (*DeleteClientResp, error) {
	out := new(DeleteClientResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/deleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermTypeOptions(ctx context.Context, in *GetPermTypeOptionsReq, opts ...grpc.CallOption) (*GetPermTypeOptionsResp, error) {
	out := new(GetPermTypeOptionsResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermTypeOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermList(ctx context.Context, in *GetPermListReq, opts ...grpc.CallOption) (*GetPermListResp, error) {
	out := new(GetPermListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermPageList(ctx context.Context, in *GetPermPageListReq, opts ...grpc.CallOption) (*GetPermPageListResp, error) {
	out := new(GetPermPageListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermListByRoleId(ctx context.Context, in *GetPermListByRoleIdReq, opts ...grpc.CallOption) (*GetPermListByRoleIdResp, error) {
	out := new(GetPermListByRoleIdResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermListByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermIdsByUid(ctx context.Context, in *GetPermIdsByUidReq, opts ...grpc.CallOption) (*GetPermIdsByUidResp, error) {
	out := new(GetPermIdsByUidResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermIdsByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermKeysByUid(ctx context.Context, in *GetPermKeysByUidReq, opts ...grpc.CallOption) (*GetPermKeysByUidResp, error) {
	out := new(GetPermKeysByUidResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermKeysByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermIdsByGroupId(ctx context.Context, in *GetPermIdsByGroupIdReq, opts ...grpc.CallOption) (*GetPermIdsByGroupIdResp, error) {
	out := new(GetPermIdsByGroupIdResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermIdsByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetPermKeysByGroupId(ctx context.Context, in *GetPermKeysByGroupIdReq, opts ...grpc.CallOption) (*GetPermKeysByGroupIdResp, error) {
	out := new(GetPermKeysByGroupIdResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getPermKeysByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddPerm(ctx context.Context, in *AddPermReq, opts ...grpc.CallOption) (*AddPermResp, error) {
	out := new(AddPermResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpdatePerm(ctx context.Context, in *UpdatePermReq, opts ...grpc.CallOption) (*UpdatePermResp, error) {
	out := new(UpdatePermResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/updatePerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) DeletePerm(ctx context.Context, in *DeletePermReq, opts ...grpc.CallOption) (*DeletePermResp, error) {
	out := new(DeletePermResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/deletePerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) DeletePermByKey(ctx context.Context, in *DeletePermByKeyReq, opts ...grpc.CallOption) (*DeletePermByKeyResp, error) {
	out := new(DeletePermByKeyResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/deletePermByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) BatchAddPerm(ctx context.Context, in *BatchAddPermReq, opts ...grpc.CallOption) (*BatchAddPermResp, error) {
	out := new(BatchAddPermResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/batchAddPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListResp, error) {
	out := new(GetRoleListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetRoleByName(ctx context.Context, in *GetRoleByNameReq, opts ...grpc.CallOption) (*GetRoleByNameResp, error) {
	out := new(GetRoleByNameResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	out := new(AddRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpsertRole(ctx context.Context, in *UpsertRoleReq, opts ...grpc.CallOption) (*UpsertRoleResp, error) {
	out := new(UpsertRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/upsertRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/updateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	out := new(DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/deleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetRoleIdsByGroupId(ctx context.Context, in *GetRoleIdsByGroupIdReq, opts ...grpc.CallOption) (*GetRoleIdsByGroupIdResp, error) {
	out := new(GetRoleIdsByGroupIdResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getRoleIdsByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*GetGroupByNameResp, error) {
	out := new(GetGroupByNameResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getGroupByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetGroupListByUid(ctx context.Context, in *GetGroupListByUidReq, opts ...grpc.CallOption) (*GetGroupListByUidResp, error) {
	out := new(GetGroupListByUidResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getGroupListByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error) {
	out := new(GetGroupListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error) {
	out := new(AddGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpsertGroup(ctx context.Context, in *UpsertGroupReq, opts ...grpc.CallOption) (*UpsertGroupResp, error) {
	out := new(UpsertGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/upsertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/updateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/deleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetUserByGroupId(ctx context.Context, in *GetUserByGroupIdReq, opts ...grpc.CallOption) (*GetUserByGroupIdResp, error) {
	out := new(GetUserByGroupIdResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getUserByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetUserPageList(ctx context.Context, in *GetUserPageListReq, opts ...grpc.CallOption) (*GetUserPageListResp, error) {
	out := new(GetUserPageListResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getUserPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) UpdateUserPerm(ctx context.Context, in *UpdateUserPermReq, opts ...grpc.CallOption) (*UpdateUserPermResp, error) {
	out := new(UpdateUserPermResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/updateUserPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddUserGroup(ctx context.Context, in *AddUserGroupReq, opts ...grpc.CallOption) (*AddUserGroupResp, error) {
	out := new(AddUserGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) RemoveUserGroup(ctx context.Context, in *RemoveUserGroupReq, opts ...grpc.CallOption) (*RemoveUserGroupResp, error) {
	out := new(RemoveUserGroupResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/removeUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) AddUserRole(ctx context.Context, in *AddUserRoleReq, opts ...grpc.CallOption) (*AddUserRoleResp, error) {
	out := new(AddUserRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/addUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) RemoveUserRole(ctx context.Context, in *RemoveUserRoleReq, opts ...grpc.CallOption) (*RemoveUserRoleResp, error) {
	out := new(RemoveUserRoleResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/removeUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) SyncSysClient(ctx context.Context, in *SyncSysClientReq, opts ...grpc.CallOption) (*SyncSysClientResp, error) {
	out := new(SyncSysClientResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/syncSysClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamClient) GetSysClient(ctx context.Context, in *GetSysClientReq, opts ...grpc.CallOption) (*GetSysClientResp, error) {
	out := new(GetSysClientResp)
	err := c.cc.Invoke(ctx, "/uamrpc.Uam/getSysClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UamServer is the server API for Uam service.
// All implementations must embed UnimplementedUamServer
// for forward compatibility
type UamServer interface {
	// GetAuthLocalByUsername 根据用户名查询本地认证记录
	GetAuthLocalByUsername(context.Context, *GetAuthLocalByUsernameReq) (*GetAuthLocalByUsernameResp, error)
	// AddAuthLocal 添加本地认证记录
	AddAuthLocal(context.Context, *AddAuthLocalReq) (*AddAuthLocalResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GetClientList(context.Context, *GetClientListReq) (*GetClientListResp, error)
	// 通过AppCode列表查询客户端
	GetClientListByCodes(context.Context, *GetClientListByCodesReq) (*GetClientListByCodesResp, error)
	// 通过AppCode查询客户端
	GetClientByCode(context.Context, *GetClientByCodeReq) (*GetClientByCodeResp, error)
	AddClient(context.Context, *AddClientReq) (*AddClientResp, error)
	UpdateClient(context.Context, *UpdateClientReq) (*UpdateClientResp, error)
	DeleteClient(context.Context, *DeleteClientReq) (*DeleteClientResp, error)
	GetPermTypeOptions(context.Context, *GetPermTypeOptionsReq) (*GetPermTypeOptionsResp, error)
	GetPermList(context.Context, *GetPermListReq) (*GetPermListResp, error)
	GetPermPageList(context.Context, *GetPermPageListReq) (*GetPermPageListResp, error)
	GetPermListByRoleId(context.Context, *GetPermListByRoleIdReq) (*GetPermListByRoleIdResp, error)
	// 获取用户权限Id列表
	GetPermIdsByUid(context.Context, *GetPermIdsByUidReq) (*GetPermIdsByUidResp, error)
	// 获取用户权限Key列表
	GetPermKeysByUid(context.Context, *GetPermKeysByUidReq) (*GetPermKeysByUidResp, error)
	// 获取组关联的权限Id列表
	GetPermIdsByGroupId(context.Context, *GetPermIdsByGroupIdReq) (*GetPermIdsByGroupIdResp, error)
	// 获取组关联的权限Key列表
	GetPermKeysByGroupId(context.Context, *GetPermKeysByGroupIdReq) (*GetPermKeysByGroupIdResp, error)
	// 添加权限
	AddPerm(context.Context, *AddPermReq) (*AddPermResp, error)
	// 更新权限
	UpdatePerm(context.Context, *UpdatePermReq) (*UpdatePermResp, error)
	// 根据ID删除权限
	DeletePerm(context.Context, *DeletePermReq) (*DeletePermResp, error)
	// 根据key删除权限
	DeletePermByKey(context.Context, *DeletePermByKeyReq) (*DeletePermByKeyResp, error)
	// 批量添加权限
	BatchAddPerm(context.Context, *BatchAddPermReq) (*BatchAddPermResp, error)
	// 获取所有角色列表，支持按是否可编辑筛选
	GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListResp, error)
	// 通过roleName查询role
	GetRoleByName(context.Context, *GetRoleByNameReq) (*GetRoleByNameResp, error)
	AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error)
	// 更新或创建角色
	UpsertRole(context.Context, *UpsertRoleReq) (*UpsertRoleResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	GetRoleIdsByGroupId(context.Context, *GetRoleIdsByGroupIdReq) (*GetRoleIdsByGroupIdResp, error)
	// 通过groupName查询group
	GetGroupByName(context.Context, *GetGroupByNameReq) (*GetGroupByNameResp, error)
	// 获取用户关联组列表
	GetGroupListByUid(context.Context, *GetGroupListByUidReq) (*GetGroupListByUidResp, error)
	// 获取客户端下组列表
	GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error)
	AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error)
	// 更新或创建角色
	UpsertGroup(context.Context, *UpsertGroupReq) (*UpsertGroupResp, error)
	// 更新组
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	// 删除组
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	// 查询组关联用户
	GetUserByGroupId(context.Context, *GetUserByGroupIdReq) (*GetUserByGroupIdResp, error)
	// 获取用户分页列表
	GetUserPageList(context.Context, *GetUserPageListReq) (*GetUserPageListResp, error)
	// 更新用户权限
	UpdateUserPerm(context.Context, *UpdateUserPermReq) (*UpdateUserPermResp, error)
	// 用户入组
	AddUserGroup(context.Context, *AddUserGroupReq) (*AddUserGroupResp, error)
	// 用户出组
	RemoveUserGroup(context.Context, *RemoveUserGroupReq) (*RemoveUserGroupResp, error)
	// 用户添加角色
	AddUserRole(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)
	// 用户移除角色
	RemoveUserRole(context.Context, *RemoveUserRoleReq) (*RemoveUserRoleResp, error)
	// 同步系统客户端
	SyncSysClient(context.Context, *SyncSysClientReq) (*SyncSysClientResp, error)
	// 获取系统客户端
	GetSysClient(context.Context, *GetSysClientReq) (*GetSysClientResp, error)
	mustEmbedUnimplementedUamServer()
}

// UnimplementedUamServer must be embedded to have forward compatible implementations.
type UnimplementedUamServer struct {
}

func (UnimplementedUamServer) GetAuthLocalByUsername(context.Context, *GetAuthLocalByUsernameReq) (*GetAuthLocalByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthLocalByUsername not implemented")
}
func (UnimplementedUamServer) AddAuthLocal(context.Context, *AddAuthLocalReq) (*AddAuthLocalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthLocal not implemented")
}
func (UnimplementedUamServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUamServer) GetClientList(context.Context, *GetClientListReq) (*GetClientListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientList not implemented")
}
func (UnimplementedUamServer) GetClientListByCodes(context.Context, *GetClientListByCodesReq) (*GetClientListByCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientListByCodes not implemented")
}
func (UnimplementedUamServer) GetClientByCode(context.Context, *GetClientByCodeReq) (*GetClientByCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByCode not implemented")
}
func (UnimplementedUamServer) AddClient(context.Context, *AddClientReq) (*AddClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedUamServer) UpdateClient(context.Context, *UpdateClientReq) (*UpdateClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedUamServer) DeleteClient(context.Context, *DeleteClientReq) (*DeleteClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedUamServer) GetPermTypeOptions(context.Context, *GetPermTypeOptionsReq) (*GetPermTypeOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermTypeOptions not implemented")
}
func (UnimplementedUamServer) GetPermList(context.Context, *GetPermListReq) (*GetPermListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermList not implemented")
}
func (UnimplementedUamServer) GetPermPageList(context.Context, *GetPermPageListReq) (*GetPermPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermPageList not implemented")
}
func (UnimplementedUamServer) GetPermListByRoleId(context.Context, *GetPermListByRoleIdReq) (*GetPermListByRoleIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermListByRoleId not implemented")
}
func (UnimplementedUamServer) GetPermIdsByUid(context.Context, *GetPermIdsByUidReq) (*GetPermIdsByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermIdsByUid not implemented")
}
func (UnimplementedUamServer) GetPermKeysByUid(context.Context, *GetPermKeysByUidReq) (*GetPermKeysByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermKeysByUid not implemented")
}
func (UnimplementedUamServer) GetPermIdsByGroupId(context.Context, *GetPermIdsByGroupIdReq) (*GetPermIdsByGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermIdsByGroupId not implemented")
}
func (UnimplementedUamServer) GetPermKeysByGroupId(context.Context, *GetPermKeysByGroupIdReq) (*GetPermKeysByGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermKeysByGroupId not implemented")
}
func (UnimplementedUamServer) AddPerm(context.Context, *AddPermReq) (*AddPermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerm not implemented")
}
func (UnimplementedUamServer) UpdatePerm(context.Context, *UpdatePermReq) (*UpdatePermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerm not implemented")
}
func (UnimplementedUamServer) DeletePerm(context.Context, *DeletePermReq) (*DeletePermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerm not implemented")
}
func (UnimplementedUamServer) DeletePermByKey(context.Context, *DeletePermByKeyReq) (*DeletePermByKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermByKey not implemented")
}
func (UnimplementedUamServer) BatchAddPerm(context.Context, *BatchAddPermReq) (*BatchAddPermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddPerm not implemented")
}
func (UnimplementedUamServer) GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedUamServer) GetRoleByName(context.Context, *GetRoleByNameReq) (*GetRoleByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (UnimplementedUamServer) AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedUamServer) UpsertRole(context.Context, *UpsertRoleReq) (*UpsertRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRole not implemented")
}
func (UnimplementedUamServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedUamServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedUamServer) GetRoleIdsByGroupId(context.Context, *GetRoleIdsByGroupIdReq) (*GetRoleIdsByGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleIdsByGroupId not implemented")
}
func (UnimplementedUamServer) GetGroupByName(context.Context, *GetGroupByNameReq) (*GetGroupByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (UnimplementedUamServer) GetGroupListByUid(context.Context, *GetGroupListByUidReq) (*GetGroupListByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupListByUid not implemented")
}
func (UnimplementedUamServer) GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedUamServer) AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedUamServer) UpsertGroup(context.Context, *UpsertGroupReq) (*UpsertGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGroup not implemented")
}
func (UnimplementedUamServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedUamServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedUamServer) GetUserByGroupId(context.Context, *GetUserByGroupIdReq) (*GetUserByGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByGroupId not implemented")
}
func (UnimplementedUamServer) GetUserPageList(context.Context, *GetUserPageListReq) (*GetUserPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPageList not implemented")
}
func (UnimplementedUamServer) UpdateUserPerm(context.Context, *UpdateUserPermReq) (*UpdateUserPermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPerm not implemented")
}
func (UnimplementedUamServer) AddUserGroup(context.Context, *AddUserGroupReq) (*AddUserGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGroup not implemented")
}
func (UnimplementedUamServer) RemoveUserGroup(context.Context, *RemoveUserGroupReq) (*RemoveUserGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserGroup not implemented")
}
func (UnimplementedUamServer) AddUserRole(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRole not implemented")
}
func (UnimplementedUamServer) RemoveUserRole(context.Context, *RemoveUserRoleReq) (*RemoveUserRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRole not implemented")
}
func (UnimplementedUamServer) SyncSysClient(context.Context, *SyncSysClientReq) (*SyncSysClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSysClient not implemented")
}
func (UnimplementedUamServer) GetSysClient(context.Context, *GetSysClientReq) (*GetSysClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysClient not implemented")
}
func (UnimplementedUamServer) mustEmbedUnimplementedUamServer() {}

// UnsafeUamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UamServer will
// result in compilation errors.
type UnsafeUamServer interface {
	mustEmbedUnimplementedUamServer()
}

func RegisterUamServer(s grpc.ServiceRegistrar, srv UamServer) {
	s.RegisterService(&Uam_ServiceDesc, srv)
}

func _Uam_GetAuthLocalByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthLocalByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetAuthLocalByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getAuthLocalByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetAuthLocalByUsername(ctx, req.(*GetAuthLocalByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddAuthLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddAuthLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addAuthLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddAuthLocal(ctx, req.(*AddAuthLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getClientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetClientList(ctx, req.(*GetClientListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetClientListByCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientListByCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetClientListByCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getClientListByCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetClientListByCodes(ctx, req.(*GetClientListByCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetClientByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetClientByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getClientByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetClientByCode(ctx, req.(*GetClientByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddClient(ctx, req.(*AddClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/updateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpdateClient(ctx, req.(*UpdateClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/deleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).DeleteClient(ctx, req.(*DeleteClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermTypeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermTypeOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermTypeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermTypeOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermTypeOptions(ctx, req.(*GetPermTypeOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermList(ctx, req.(*GetPermListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermPageList(ctx, req.(*GetPermPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermListByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermListByRoleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermListByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermListByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermListByRoleId(ctx, req.(*GetPermListByRoleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermIdsByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermIdsByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermIdsByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermIdsByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermIdsByUid(ctx, req.(*GetPermIdsByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermKeysByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermKeysByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermKeysByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermKeysByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermKeysByUid(ctx, req.(*GetPermKeysByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermIdsByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermIdsByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermIdsByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermIdsByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermIdsByGroupId(ctx, req.(*GetPermIdsByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetPermKeysByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermKeysByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetPermKeysByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getPermKeysByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetPermKeysByGroupId(ctx, req.(*GetPermKeysByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddPerm(ctx, req.(*AddPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpdatePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpdatePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/updatePerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpdatePerm(ctx, req.(*UpdatePermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_DeletePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).DeletePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/deletePerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).DeletePerm(ctx, req.(*DeletePermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_DeletePermByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).DeletePermByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/deletePermByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).DeletePermByKey(ctx, req.(*DeletePermByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_BatchAddPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).BatchAddPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/batchAddPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).BatchAddPerm(ctx, req.(*BatchAddPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetRoleList(ctx, req.(*GetRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetRoleByName(ctx, req.(*GetRoleByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpsertRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpsertRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/upsertRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpsertRole(ctx, req.(*UpsertRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/updateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/deleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetRoleIdsByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleIdsByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetRoleIdsByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getRoleIdsByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetRoleIdsByGroupId(ctx, req.(*GetRoleIdsByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getGroupByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetGroupByName(ctx, req.(*GetGroupByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetGroupListByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetGroupListByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getGroupListByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetGroupListByUid(ctx, req.(*GetGroupListByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetGroupList(ctx, req.(*GetGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpsertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpsertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/upsertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpsertGroup(ctx, req.(*UpsertGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/updateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/deleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetUserByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetUserByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getUserByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetUserByGroupId(ctx, req.(*GetUserByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetUserPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetUserPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getUserPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetUserPageList(ctx, req.(*GetUserPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_UpdateUserPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).UpdateUserPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/updateUserPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).UpdateUserPerm(ctx, req.(*UpdateUserPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddUserGroup(ctx, req.(*AddUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_RemoveUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).RemoveUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/removeUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).RemoveUserGroup(ctx, req.(*RemoveUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_AddUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).AddUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/addUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).AddUserRole(ctx, req.(*AddUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_RemoveUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).RemoveUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/removeUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).RemoveUserRole(ctx, req.(*RemoveUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_SyncSysClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSysClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).SyncSysClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/syncSysClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).SyncSysClient(ctx, req.(*SyncSysClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uam_GetSysClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamServer).GetSysClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uamrpc.Uam/getSysClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamServer).GetSysClient(ctx, req.(*GetSysClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Uam_ServiceDesc is the grpc.ServiceDesc for Uam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uamrpc.Uam",
	HandlerType: (*UamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAuthLocalByUsername",
			Handler:    _Uam_GetAuthLocalByUsername_Handler,
		},
		{
			MethodName: "addAuthLocal",
			Handler:    _Uam_AddAuthLocal_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _Uam_GetUserInfo_Handler,
		},
		{
			MethodName: "getClientList",
			Handler:    _Uam_GetClientList_Handler,
		},
		{
			MethodName: "getClientListByCodes",
			Handler:    _Uam_GetClientListByCodes_Handler,
		},
		{
			MethodName: "getClientByCode",
			Handler:    _Uam_GetClientByCode_Handler,
		},
		{
			MethodName: "addClient",
			Handler:    _Uam_AddClient_Handler,
		},
		{
			MethodName: "updateClient",
			Handler:    _Uam_UpdateClient_Handler,
		},
		{
			MethodName: "deleteClient",
			Handler:    _Uam_DeleteClient_Handler,
		},
		{
			MethodName: "getPermTypeOptions",
			Handler:    _Uam_GetPermTypeOptions_Handler,
		},
		{
			MethodName: "getPermList",
			Handler:    _Uam_GetPermList_Handler,
		},
		{
			MethodName: "getPermPageList",
			Handler:    _Uam_GetPermPageList_Handler,
		},
		{
			MethodName: "getPermListByRoleId",
			Handler:    _Uam_GetPermListByRoleId_Handler,
		},
		{
			MethodName: "getPermIdsByUid",
			Handler:    _Uam_GetPermIdsByUid_Handler,
		},
		{
			MethodName: "getPermKeysByUid",
			Handler:    _Uam_GetPermKeysByUid_Handler,
		},
		{
			MethodName: "getPermIdsByGroupId",
			Handler:    _Uam_GetPermIdsByGroupId_Handler,
		},
		{
			MethodName: "getPermKeysByGroupId",
			Handler:    _Uam_GetPermKeysByGroupId_Handler,
		},
		{
			MethodName: "addPerm",
			Handler:    _Uam_AddPerm_Handler,
		},
		{
			MethodName: "updatePerm",
			Handler:    _Uam_UpdatePerm_Handler,
		},
		{
			MethodName: "deletePerm",
			Handler:    _Uam_DeletePerm_Handler,
		},
		{
			MethodName: "deletePermByKey",
			Handler:    _Uam_DeletePermByKey_Handler,
		},
		{
			MethodName: "batchAddPerm",
			Handler:    _Uam_BatchAddPerm_Handler,
		},
		{
			MethodName: "getRoleList",
			Handler:    _Uam_GetRoleList_Handler,
		},
		{
			MethodName: "getRoleByName",
			Handler:    _Uam_GetRoleByName_Handler,
		},
		{
			MethodName: "addRole",
			Handler:    _Uam_AddRole_Handler,
		},
		{
			MethodName: "upsertRole",
			Handler:    _Uam_UpsertRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _Uam_UpdateRole_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _Uam_DeleteRole_Handler,
		},
		{
			MethodName: "getRoleIdsByGroupId",
			Handler:    _Uam_GetRoleIdsByGroupId_Handler,
		},
		{
			MethodName: "getGroupByName",
			Handler:    _Uam_GetGroupByName_Handler,
		},
		{
			MethodName: "getGroupListByUid",
			Handler:    _Uam_GetGroupListByUid_Handler,
		},
		{
			MethodName: "getGroupList",
			Handler:    _Uam_GetGroupList_Handler,
		},
		{
			MethodName: "addGroup",
			Handler:    _Uam_AddGroup_Handler,
		},
		{
			MethodName: "upsertGroup",
			Handler:    _Uam_UpsertGroup_Handler,
		},
		{
			MethodName: "updateGroup",
			Handler:    _Uam_UpdateGroup_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _Uam_DeleteGroup_Handler,
		},
		{
			MethodName: "getUserByGroupId",
			Handler:    _Uam_GetUserByGroupId_Handler,
		},
		{
			MethodName: "getUserPageList",
			Handler:    _Uam_GetUserPageList_Handler,
		},
		{
			MethodName: "updateUserPerm",
			Handler:    _Uam_UpdateUserPerm_Handler,
		},
		{
			MethodName: "addUserGroup",
			Handler:    _Uam_AddUserGroup_Handler,
		},
		{
			MethodName: "removeUserGroup",
			Handler:    _Uam_RemoveUserGroup_Handler,
		},
		{
			MethodName: "addUserRole",
			Handler:    _Uam_AddUserRole_Handler,
		},
		{
			MethodName: "removeUserRole",
			Handler:    _Uam_RemoveUserRole_Handler,
		},
		{
			MethodName: "syncSysClient",
			Handler:    _Uam_SyncSysClient_Handler,
		},
		{
			MethodName: "getSysClient",
			Handler:    _Uam_GetSysClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uamrpc.proto",
}
