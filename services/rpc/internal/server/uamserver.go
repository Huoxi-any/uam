// Code generated by goctl. DO NOT EDIT!
// Source: uamrpc.proto

package server

import (
	"context"

	"uam/services/rpc/internal/logic"
	"uam/services/rpc/internal/svc"
	"uam/services/rpc/pb/uamrpc"
)

type UamServer struct {
	svcCtx *svc.ServiceContext
	uamrpc.UnimplementedUamServer
}

func NewUamServer(svcCtx *svc.ServiceContext) *UamServer {
	return &UamServer{
		svcCtx: svcCtx,
	}
}

//  GetAuthLocalByUsername 根据用户名查询本地认证记录
func (s *UamServer) GetAuthLocalByUsername(ctx context.Context, in *uamrpc.GetAuthLocalByUsernameReq) (*uamrpc.GetAuthLocalByUsernameResp, error) {
	l := logic.NewGetAuthLocalByUsernameLogic(ctx, s.svcCtx)
	return l.GetAuthLocalByUsername(in)
}

//  AddAuthLocal 添加本地认证记录
func (s *UamServer) AddAuthLocal(ctx context.Context, in *uamrpc.AddAuthLocalReq) (*uamrpc.AddAuthLocalResp, error) {
	l := logic.NewAddAuthLocalLogic(ctx, s.svcCtx)
	return l.AddAuthLocal(in)
}

func (s *UamServer) GetUserInfo(ctx context.Context, in *uamrpc.GetUserInfoReq) (*uamrpc.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UamServer) GetClientList(ctx context.Context, in *uamrpc.GetClientListReq) (*uamrpc.GetClientListResp, error) {
	l := logic.NewGetClientListLogic(ctx, s.svcCtx)
	return l.GetClientList(in)
}

//  通过AppCode列表查询客户端
func (s *UamServer) GetClientListByCodes(ctx context.Context, in *uamrpc.GetClientListByCodesReq) (*uamrpc.GetClientListByCodesResp, error) {
	l := logic.NewGetClientListByCodesLogic(ctx, s.svcCtx)
	return l.GetClientListByCodes(in)
}

//  通过AppCode查询客户端
func (s *UamServer) GetClientByCode(ctx context.Context, in *uamrpc.GetClientByCodeReq) (*uamrpc.GetClientByCodeResp, error) {
	l := logic.NewGetClientByCodeLogic(ctx, s.svcCtx)
	return l.GetClientByCode(in)
}

func (s *UamServer) AddClient(ctx context.Context, in *uamrpc.AddClientReq) (*uamrpc.AddClientResp, error) {
	l := logic.NewAddClientLogic(ctx, s.svcCtx)
	return l.AddClient(in)
}

func (s *UamServer) UpdateClient(ctx context.Context, in *uamrpc.UpdateClientReq) (*uamrpc.UpdateClientResp, error) {
	l := logic.NewUpdateClientLogic(ctx, s.svcCtx)
	return l.UpdateClient(in)
}

func (s *UamServer) DeleteClient(ctx context.Context, in *uamrpc.DeleteClientReq) (*uamrpc.DeleteClientResp, error) {
	l := logic.NewDeleteClientLogic(ctx, s.svcCtx)
	return l.DeleteClient(in)
}

func (s *UamServer) GetPermTypeOptions(ctx context.Context, in *uamrpc.GetPermTypeOptionsReq) (*uamrpc.GetPermTypeOptionsResp, error) {
	l := logic.NewGetPermTypeOptionsLogic(ctx, s.svcCtx)
	return l.GetPermTypeOptions(in)
}

func (s *UamServer) GetPermList(ctx context.Context, in *uamrpc.GetPermListReq) (*uamrpc.GetPermListResp, error) {
	l := logic.NewGetPermListLogic(ctx, s.svcCtx)
	return l.GetPermList(in)
}

func (s *UamServer) GetPermPageList(ctx context.Context, in *uamrpc.GetPermPageListReq) (*uamrpc.GetPermPageListResp, error) {
	l := logic.NewGetPermPageListLogic(ctx, s.svcCtx)
	return l.GetPermPageList(in)
}

func (s *UamServer) GetPermListByRoleId(ctx context.Context, in *uamrpc.GetPermListByRoleIdReq) (*uamrpc.GetPermListByRoleIdResp, error) {
	l := logic.NewGetPermListByRoleIdLogic(ctx, s.svcCtx)
	return l.GetPermListByRoleId(in)
}

//  获取用户权限Id列表
func (s *UamServer) GetPermIdsByUid(ctx context.Context, in *uamrpc.GetPermIdsByUidReq) (*uamrpc.GetPermIdsByUidResp, error) {
	l := logic.NewGetPermIdsByUidLogic(ctx, s.svcCtx)
	return l.GetPermIdsByUid(in)
}

//  获取用户权限Key列表
func (s *UamServer) GetPermKeysByUid(ctx context.Context, in *uamrpc.GetPermKeysByUidReq) (*uamrpc.GetPermKeysByUidResp, error) {
	l := logic.NewGetPermKeysByUidLogic(ctx, s.svcCtx)
	return l.GetPermKeysByUid(in)
}

//  获取组关联的权限Id列表
func (s *UamServer) GetPermIdsByGroupId(ctx context.Context, in *uamrpc.GetPermIdsByGroupIdReq) (*uamrpc.GetPermIdsByGroupIdResp, error) {
	l := logic.NewGetPermIdsByGroupIdLogic(ctx, s.svcCtx)
	return l.GetPermIdsByGroupId(in)
}

//  获取组关联的权限Key列表
func (s *UamServer) GetPermKeysByGroupId(ctx context.Context, in *uamrpc.GetPermKeysByGroupIdReq) (*uamrpc.GetPermKeysByGroupIdResp, error) {
	l := logic.NewGetPermKeysByGroupIdLogic(ctx, s.svcCtx)
	return l.GetPermKeysByGroupId(in)
}

//  添加权限
func (s *UamServer) AddPerm(ctx context.Context, in *uamrpc.AddPermReq) (*uamrpc.AddPermResp, error) {
	l := logic.NewAddPermLogic(ctx, s.svcCtx)
	return l.AddPerm(in)
}

//  更新权限
func (s *UamServer) UpdatePerm(ctx context.Context, in *uamrpc.UpdatePermReq) (*uamrpc.UpdatePermResp, error) {
	l := logic.NewUpdatePermLogic(ctx, s.svcCtx)
	return l.UpdatePerm(in)
}

//  根据ID删除权限
func (s *UamServer) DeletePerm(ctx context.Context, in *uamrpc.DeletePermReq) (*uamrpc.DeletePermResp, error) {
	l := logic.NewDeletePermLogic(ctx, s.svcCtx)
	return l.DeletePerm(in)
}

//  根据key删除权限
func (s *UamServer) DeletePermByKey(ctx context.Context, in *uamrpc.DeletePermByKeyReq) (*uamrpc.DeletePermByKeyResp, error) {
	l := logic.NewDeletePermByKeyLogic(ctx, s.svcCtx)
	return l.DeletePermByKey(in)
}

//  批量添加权限
func (s *UamServer) BatchAddPerm(ctx context.Context, in *uamrpc.BatchAddPermReq) (*uamrpc.BatchAddPermResp, error) {
	l := logic.NewBatchAddPermLogic(ctx, s.svcCtx)
	return l.BatchAddPerm(in)
}

//  获取所有角色列表，支持按是否可编辑筛选
func (s *UamServer) GetRoleList(ctx context.Context, in *uamrpc.GetRoleListReq) (*uamrpc.GetRoleListResp, error) {
	l := logic.NewGetRoleListLogic(ctx, s.svcCtx)
	return l.GetRoleList(in)
}

//  通过roleName查询role
func (s *UamServer) GetRoleByName(ctx context.Context, in *uamrpc.GetRoleByNameReq) (*uamrpc.GetRoleByNameResp, error) {
	l := logic.NewGetRoleByNameLogic(ctx, s.svcCtx)
	return l.GetRoleByName(in)
}

func (s *UamServer) AddRole(ctx context.Context, in *uamrpc.AddRoleReq) (*uamrpc.AddRoleResp, error) {
	l := logic.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

//  更新或创建角色
func (s *UamServer) UpsertRole(ctx context.Context, in *uamrpc.UpsertRoleReq) (*uamrpc.UpsertRoleResp, error) {
	l := logic.NewUpsertRoleLogic(ctx, s.svcCtx)
	return l.UpsertRole(in)
}

func (s *UamServer) UpdateRole(ctx context.Context, in *uamrpc.UpdateRoleReq) (*uamrpc.UpdateRoleResp, error) {
	l := logic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

func (s *UamServer) DeleteRole(ctx context.Context, in *uamrpc.DeleteRoleReq) (*uamrpc.DeleteRoleResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *UamServer) GetRoleIdsByGroupId(ctx context.Context, in *uamrpc.GetRoleIdsByGroupIdReq) (*uamrpc.GetRoleIdsByGroupIdResp, error) {
	l := logic.NewGetRoleIdsByGroupIdLogic(ctx, s.svcCtx)
	return l.GetRoleIdsByGroupId(in)
}

//  通过groupName查询group
func (s *UamServer) GetGroupByName(ctx context.Context, in *uamrpc.GetGroupByNameReq) (*uamrpc.GetGroupByNameResp, error) {
	l := logic.NewGetGroupByNameLogic(ctx, s.svcCtx)
	return l.GetGroupByName(in)
}

//  获取用户关联组列表
func (s *UamServer) GetGroupListByUid(ctx context.Context, in *uamrpc.GetGroupListByUidReq) (*uamrpc.GetGroupListByUidResp, error) {
	l := logic.NewGetGroupListByUidLogic(ctx, s.svcCtx)
	return l.GetGroupListByUid(in)
}

//  获取客户端下组列表
func (s *UamServer) GetGroupList(ctx context.Context, in *uamrpc.GetGroupListReq) (*uamrpc.GetGroupListResp, error) {
	l := logic.NewGetGroupListLogic(ctx, s.svcCtx)
	return l.GetGroupList(in)
}

func (s *UamServer) AddGroup(ctx context.Context, in *uamrpc.AddGroupReq) (*uamrpc.AddGroupResp, error) {
	l := logic.NewAddGroupLogic(ctx, s.svcCtx)
	return l.AddGroup(in)
}

//  更新或创建角色
func (s *UamServer) UpsertGroup(ctx context.Context, in *uamrpc.UpsertGroupReq) (*uamrpc.UpsertGroupResp, error) {
	l := logic.NewUpsertGroupLogic(ctx, s.svcCtx)
	return l.UpsertGroup(in)
}

//  更新组
func (s *UamServer) UpdateGroup(ctx context.Context, in *uamrpc.UpdateGroupReq) (*uamrpc.UpdateGroupResp, error) {
	l := logic.NewUpdateGroupLogic(ctx, s.svcCtx)
	return l.UpdateGroup(in)
}

//  删除组
func (s *UamServer) DeleteGroup(ctx context.Context, in *uamrpc.DeleteGroupReq) (*uamrpc.DeleteGroupResp, error) {
	l := logic.NewDeleteGroupLogic(ctx, s.svcCtx)
	return l.DeleteGroup(in)
}

//  查询组关联用户
func (s *UamServer) GetUserByGroupId(ctx context.Context, in *uamrpc.GetUserByGroupIdReq) (*uamrpc.GetUserByGroupIdResp, error) {
	l := logic.NewGetUserByGroupIdLogic(ctx, s.svcCtx)
	return l.GetUserByGroupId(in)
}

//  获取用户分页列表
func (s *UamServer) GetUserPageList(ctx context.Context, in *uamrpc.GetUserPageListReq) (*uamrpc.GetUserPageListResp, error) {
	l := logic.NewGetUserPageListLogic(ctx, s.svcCtx)
	return l.GetUserPageList(in)
}

//  更新用户权限
func (s *UamServer) UpdateUserPerm(ctx context.Context, in *uamrpc.UpdateUserPermReq) (*uamrpc.UpdateUserPermResp, error) {
	l := logic.NewUpdateUserPermLogic(ctx, s.svcCtx)
	return l.UpdateUserPerm(in)
}

//  用户入组
func (s *UamServer) AddUserGroup(ctx context.Context, in *uamrpc.AddUserGroupReq) (*uamrpc.AddUserGroupResp, error) {
	l := logic.NewAddUserGroupLogic(ctx, s.svcCtx)
	return l.AddUserGroup(in)
}

//  用户出组
func (s *UamServer) RemoveUserGroup(ctx context.Context, in *uamrpc.RemoveUserGroupReq) (*uamrpc.RemoveUserGroupResp, error) {
	l := logic.NewRemoveUserGroupLogic(ctx, s.svcCtx)
	return l.RemoveUserGroup(in)
}

//  用户添加角色
func (s *UamServer) AddUserRole(ctx context.Context, in *uamrpc.AddUserRoleReq) (*uamrpc.AddUserRoleResp, error) {
	l := logic.NewAddUserRoleLogic(ctx, s.svcCtx)
	return l.AddUserRole(in)
}

//  用户移除角色
func (s *UamServer) RemoveUserRole(ctx context.Context, in *uamrpc.RemoveUserRoleReq) (*uamrpc.RemoveUserRoleResp, error) {
	l := logic.NewRemoveUserRoleLogic(ctx, s.svcCtx)
	return l.RemoveUserRole(in)
}

//  同步系统客户端
func (s *UamServer) SyncSysClient(ctx context.Context, in *uamrpc.SyncSysClientReq) (*uamrpc.SyncSysClientResp, error) {
	l := logic.NewSyncSysClientLogic(ctx, s.svcCtx)
	return l.SyncSysClient(in)
}

//  获取系统客户端
func (s *UamServer) GetSysClient(ctx context.Context, in *uamrpc.GetSysClientReq) (*uamrpc.GetSysClientResp, error) {
	l := logic.NewGetSysClientLogic(ctx, s.svcCtx)
	return l.GetSysClient(in)
}
