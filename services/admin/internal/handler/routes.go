// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "uam/services/admin/internal/handler/auth"
	client "uam/services/admin/internal/handler/client"
	core "uam/services/admin/internal/handler/core"
	group "uam/services/admin/internal/handler/group"
	permission "uam/services/admin/internal/handler/permission"
	role "uam/services/admin/internal/handler/role"
	user "uam/services/admin/internal/handler/user"
	"uam/services/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/userinfo",
					Handler: core.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/logout",
					Handler: core.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth, serverCtx.AccessControl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/clients",
					Handler: client.ClientListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/client",
					Handler: client.AddClientHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/client/:id",
					Handler: client.UpdateClientHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/client/:id",
					Handler: client.DeleteClientHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/client-options",
					Handler: client.ClientOptionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth, serverCtx.AccessControl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/permissions",
					Handler: permission.PermPageListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/permission",
					Handler: permission.AddPermHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/permission/:id",
					Handler: permission.UpdatePermHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/permission/:id",
					Handler: permission.DeletePermHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth, serverCtx.AccessControl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: role.RoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role",
					Handler: role.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/role/:id",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/role/:id",
					Handler: role.DeleteRoleHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth, serverCtx.AccessControl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/groups",
					Handler: group.GroupListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group",
					Handler: group.AddGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/group/:id",
					Handler: group.UpdateGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/group/:id",
					Handler: group.DeleteGroupHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth, serverCtx.AccessControl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: user.UserPageListHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/:uid",
					Handler: user.UpdateUserPermHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/uam/admin/v1"),
	)
}
